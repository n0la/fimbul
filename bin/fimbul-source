#!/usr/bin/env lua52

local std = require("std")

local repository = require("fimbul.repository")
local sources = require("fimbul.sources")
local util = require("fimbul.util")

local optparser = std.optparse(
[[
fimbul-source 0.1
Part of the fimbul project. All rights reserved.

Usage: fimbul-source [command] (options)

The fimbul-source command helps you to keep your data sources up
to date so that your campaigns always use the most recent data.

Options:
   -h --help     This bogus.
      --verson   Version information.

Commands:
   import [url, url, ...]    Import new source.
   show [src, src, ...]      Show information about all or specific sources.
   update                    Update all sources.

Please report bugs to https://github.com/n0la/fimbul.
]])

local src = sources:new()

function source_update()
   for k, v in pairs(src.data) do
      print('Updating source ' .. util.getname(v.name) .. ':')
      ok, ret = pcall(src.update, src, v)

      if not ok then
         io.stderr:write(util.prettify(ret))
         os.exit(3)
      end
   end
end

function source_import()
   for _, url in pairs(arg) do
      ok, ret = pcall(src.import, src, url)

      if not ok then
         io.stderr:write(util.prettify(ret))
         os.exit(3)
      end
   end
end

function source_show()
   newline = false

   for _, s in pairs(src.data) do
      if #arg == 0 or util.containsvalue(arg, s.name) then
         print('NAME: ' .. s.name)

         if s.url ~= nil then
            print('URL: ' .. s.url)
         end

         if s.games ~= nil then
            print('GAMES: ' .. table.concat(s.games, ", "))
         end

         if s.description ~= nil then
            print('DESCRIPTION:')
            print(s.description)
         end
      end
   end
end

local commands = {
   update = { handler = source_update },
   import = { handler = source_import },
   show = { handler = source_show },
}

if arg[1] == nil or not util.containskey(commands, arg[1]) then
   optparser:help()
   os.exit(1)
end

local cmd = arg[1]
table.remove(arg, 1)
_G.arg, _G.opts = optparser:parse(_G.arg)

-- Call commands
local ok, ret = pcall(commands[cmd].handler)
if ok then
   os.exit(ret or 0)
else
   print(util.prettify(ret))
   os.exit(3)
end
