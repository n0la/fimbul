#!/usr/bin/env lua52

local pretty = require("pl.pretty")
local std = require("std")

local util = require("fimbul.util")
local repository = require("fimbul.repository")

local optparser = std.optparse(
[[
fimbul-item 0.1 - Calculate prices for craftable items and artefacts.
Part of the fimbul project. Copyright (c) 2014 Florian Stinglmayr

Usage: fimbul-item [options] item1, item2, ..., itemN

Options:

   -h --help             This bogus.
   -p --price            Print how the price is calculated. Default: off
   -r --repository=DIR   Directory of the repository. Default: .
   -v --verbose          Print verbose item output. Default: off
      --version          Version information.

Please report bugs to https://github.com/n0la/fimbul.
]])

function dump_item(i)
   if opts['verbose'] ~= nil then
      print(i:string(true))
   else
      print(i:string(false))
   end

   if opts['price'] ~= nil then
      local p, sv = i:price()
      print(sv:string())
   end
end

_G.arg, _G.opts = optparser:parse(_G.arg)
-- Repository
local r, repo

if opts['repository'] ~= nil then
   repo = opts['repository']
else
   repo = '.'
end

ok, r = pcall(repository.new, repository, repo)
if not ok then
   io.stderr:write(util.prettify(r))
   os.exit(3)
end
r:load()

for _, i in pairs(arg) do
   ok, item = pcall(repository.parse_item, r, i)
   if not ok then
      io.stderr:write('Error parsing item "' .. i .. '": ' ..
                         util.prettify(item))
   else
      dump_item(item)
   end
end
